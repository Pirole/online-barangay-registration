// Prisma schema for Online Barangay Registration System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================
// ENUMS
// ========================

enum UserRole {
  SUPER_ADMIN
  EVENT_MANAGER
  STAFF
  RESIDENT
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  LOGIN
  LOGOUT
  SCAN
}

// ========================
// AUTH + PROFILE
// ========================

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  phone        String?   @unique
  passwordHash String    @map("password_hash")
  role         UserRole  @default(RESIDENT)
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  profile       Profile?
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]   @relation("AuditActor")
  managedEvents Event[]      @relation("UserManagedEvents")

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  age       Int?
  address   String?
  barangay  String?
  contact   String?
  gender    String?

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  registrations Registration[]
  teamMemberships TeamMember[]

  @@map("profiles")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// ========================
// EVENTS
// ========================

model Event {
  id              String    @id @default(uuid())
  title           String
  description     String?
  location        String
  startDate       DateTime  @map("start_date")
  endDate         DateTime  @map("end_date")
  capacity        Int?
  ageMin          Int?      @map("age_min")
  ageMax          Int?      @map("age_max")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  categoryId    String @map("category_id")
  category      EventCategory @relation(fields: [categoryId], references: [id])
  managerId     String @map("manager_id")
  manager       User   @relation("UserManagedEvents", fields: [managerId], references: [id])
  registrations Registration[]
  teams         Team[]
  customFields  CustomField[]

  @@map("events")
}

model EventCategory {
  id    String  @id @default(uuid())
  name  String  @unique
  description String?

  // Relations
  events Event[]

  @@map("event_categories")
}

// ========================
// REGISTRATIONS + TEAMS
// ========================

model Registration {
  id          String             @id @default(uuid())
  eventId     String             @map("event_id")
  profileId   String?            @map("profile_id")
  status      RegistrationStatus @default(PENDING)
  photoPath   String?            @map("photo_path")
  customValues Json?             @map("custom_values")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  // Relations
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile Profile? @relation(fields: [profileId], references: [id])
  qrCodes QrCode[]
  otpRequests OtpRequest[]

  @@map("registrations")
}

model Team {
  id        String   @id @default(uuid())
  eventId   String   @map("event_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  event   Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String   @map("team_id")
  profileId String   @map("profile_id")

  // Relations
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id])

  @@map("team_members")
}

// ========================
// LOGGING & SECURITY
// ========================

model AuditLog {
  id        String      @id @default(uuid())
  actorId   String?     @map("actor_id")
  action    AuditAction
  targetType String     @map("target_type")
  targetId  String      @map("target_id")
  metadata  Json?
  ipAddress String?     @map("ip_address")
  userAgent String?     @map("user_agent")
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  actor User? @relation("AuditActor", fields: [actorId], references: [id])

  @@map("audit_logs")
}

model QrCode {
  id             String   @id @default(uuid())
  registrationId String   @map("registration_id")
  codeValue      String   @unique @map("code_value")
  imagePath      String?  @map("image_path")
  expiresAt      DateTime @map("expires_at")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("qr_codes")
}

model OtpRequest {
  id             String   @id @default(uuid())
  registrationId String   @map("registration_id")
  codeHash       String   @map("code_hash")
  expiresAt      DateTime @map("expires_at")
  attempts       Int      @default(0)
  isUsed         Boolean  @default(false) @map("is_used")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("otp_requests")
}

// ========================
// CUSTOM FIELDS
// ========================

model CustomField {
  id        String   @id @default(uuid())
  eventId   String   @map("event_id")
  name      String
  type      String   // text, number, select, etc.
  required  Boolean  @default(false)
  predefined Boolean @default(false) // true = system-defined field (e.g., jersey number)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("custom_fields")
}
