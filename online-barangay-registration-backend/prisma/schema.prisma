generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  phone         String?        @unique
  passwordHash  String         @map("password_hash")
  role          UserRole       @default(RESIDENT)
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  auditLogs     AuditLog[]     @relation("AuditActor")
  managedEvents Event[]        @relation("UserManagedEvents")
  profile       Profile?
  refreshTokens RefreshToken[]

  @@map("users")
}

model Profile {
  id              String         @id @default(uuid())
  userId          String         @unique @map("user_id")
  firstName       String         @map("first_name")
  lastName        String         @map("last_name")
  age             Int?
  address         String?
  barangay        String?
  contact         String?
  gender          String?
  user            User           @relation(fields: [userId], references: [id])
  registrations   Registration[]
  teamMemberships TeamMember[]

  @@map("profiles")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Event {
  id               String         @id @default(uuid())
  title            String
  description      String?
  location         String
  startDate        DateTime       @map("start_date")
  endDate          DateTime       @map("end_date")
  capacity         Int?
  ageMin           Int?           @map("age_min")
  ageMax           Int?           @map("age_max")
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  categoryId       String         @map("category_id")
  managerId        String         @map("manager_id")
  photoPath        String?        @map("photo_path")
  category         EventCategory  @relation(fields: [categoryId], references: [id])
  manager          User           @relation("UserManagedEvents", fields: [managerId], references: [id])
  registrations    Registration[]
  teams            Team[]
  customFields     CustomField[]

  // ðŸ”¹ New fields
  registrationMode RegistrationMode @default(INDIVIDUAL) @map("registration_mode")
  teamMemberSlots  Int?              @default(1) @map("team_member_slots")

  @@map("events")
}


model EventCategory {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  events      Event[]

  @@map("event_categories")
}

model Registration {
  id           String             @id @default(uuid())
  eventId      String             @map("event_id")
  profileId    String?            @map("profile_id")
  status       RegistrationStatus @default(PENDING)
  photoPath    String?            @map("photo_path")
  customValues Json?              @map("custom_values")
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  otpAttempts  Int                @default(0)
  otpCodeHash  String?            @map("otp_code_hash")
  otpExpiresAt DateTime?          @map("otp_expires_at")
  otpRequests  OtpRequest[]
  qrCodes      QrCode[]
  event        Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile      Profile?           @relation(fields: [profileId], references: [id])

  @@map("registrations")
}

model Team {
  id        String       @id @default(uuid())
  eventId   String       @map("event_id")
  name      String
  createdAt DateTime     @default(now()) @map("created_at")
  members   TeamMember[]
  event     Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("teams")
}

model TeamMember {
  id        String  @id @default(uuid())
  teamId    String  @map("team_id")
  profileId String  @map("profile_id")
  profile   Profile @relation(fields: [profileId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_members")
}

model AuditLog {
  id         String      @id @default(uuid())
  actorId    String?     @map("actor_id")
  action     AuditAction
  targetType String      @map("target_type")
  targetId   String      @map("target_id")
  metadata   Json?
  ipAddress  String?     @map("ip_address")
  userAgent  String?     @map("user_agent")
  createdAt  DateTime    @default(now()) @map("created_at")
  actor      User?       @relation("AuditActor", fields: [actorId], references: [id])

  @@map("audit_logs")
}

model QrCode {
  id             String       @id @default(uuid())
  registrationId String       @map("registration_id")
  codeValue      String       @unique @map("code_value")
  imagePath      String?      @map("image_path")
  expiresAt      DateTime     @map("expires_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("qr_codes")
}

model OtpRequest {
  id             String       @id @default(uuid())
  registrationId String       @map("registration_id")
  codeHash       String       @map("code_hash")
  expiresAt      DateTime     @map("expires_at")
  attempts       Int          @default(0)
  isUsed         Boolean      @default(false) @map("is_used")
  createdAt      DateTime     @default(now()) @map("created_at")
  maxAttempts    Int          @default(3)
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId])
  @@index([expiresAt])
  @@map("otp_requests")
}

model CustomField {
  id         String   @id @default(uuid())
  eventId    String   @map("event_id")
  key        String   // e.g. jersey_number
  label      String   // e.g. Jersey Number
  type       String   // 'text' | 'number' | 'select' | 'radio'
  isRequired Boolean  @default(false) @map("is_required")
  options    Json?    // [{"value":"u12","label":"U12"}, ...]
  sortOrder  Int      @default(0) @map("sort_order")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("custom_fields")
}

enum UserRole {
  SUPER_ADMIN
  EVENT_MANAGER
  STAFF
  RESIDENT
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  LOGIN
  LOGOUT
  SCAN
}

enum RegistrationMode {
  INDIVIDUAL
  TEAM
  BOTH
}